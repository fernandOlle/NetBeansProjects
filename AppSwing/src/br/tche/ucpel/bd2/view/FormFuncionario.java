/*
 * FormFuncionario.java
 *
 * Created on September 23, 2008, 8:38 PM
 */
package br.tche.ucpel.bd2.view;

import br.tche.ucpel.bd2.dao.DepartamentoDAO;
import br.tche.ucpel.bd2.dao.FuncionarioDAO;
import br.tche.ucpel.bd2.bean.Departamento;
import br.tche.ucpel.bd2.bean.Funcionario;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Classe responsável pelo desenho da tela de cadastro do Funcionário.
 * <br/>
 * São tratados eventos de lostFocus (perda do foco) no campo txtCodigo, os 
 * eventos de acionamento de botões e o duplo click na tabela.
 * @author  mertins
 */
public class FormFuncionario extends javax.swing.JInternalFrame {

    private JFrame mdi;

    /**
     * Creates new form FormFuncionario 
     * @param mdi MDI principal.
     */
    public FormFuncionario(JFrame mdi) {
        this.mdi = mdi;
        initComponents();
        this.atualizaLista();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbFuncionarios = new javax.swing.JTable();
        btAtualizar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cmbDepartamento = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btSalvar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbGerente = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCargo = new javax.swing.JTextField();
        txtDtContratacao = new javax.swing.JTextField();
        txtSalario = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        btLimpar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();

        setClosable(true);
        setTitle("Cadastro Funcionário");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        tbFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Data Contratação", "Cargo", "Gerente", "Departamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbFuncionarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbFuncionariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbFuncionarios);

        btAtualizar.setText("Atualizar");
        btAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmbDepartamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Departamento");

        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        jLabel2.setText("Nome");

        jLabel3.setText("Cargo");

        jLabel4.setText("Data Contratação");

        jLabel5.setText("Gerente");

        cmbGerente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Salário");

        jLabel7.setText("Código");

        txtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoFocusLost(evt);
            }
        });

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbDepartamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbGerente, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtCargo, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(txtSalario, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(txtDtContratacao, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btLimpar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSalvar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btExcluir)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtDtContratacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbGerente, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(txtCargo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btLimpar)
                        .addComponent(btSalvar)
                        .addComponent(btExcluir)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btAtualizar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAtualizar)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
    this.atualizaComboDepartamento();
    this.atualizaComboGerente();
}//GEN-LAST:event_formInternalFrameOpened

private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
    try {
// TODO add your handling code here:
        Funcionario func = new Funcionario();
        func.setNome(this.txtNome.getText());
        func.setCargo(this.txtCargo.getText());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        func.setDtContratacao(sdf.parse(this.txtDtContratacao.getText()));
        func.setSalario(new BigDecimal(this.txtSalario.getText()));
        Object obj = this.cmbDepartamento.getModel().getSelectedItem();
        if (obj instanceof Departamento) {
            func.setDepartamento((Departamento) obj);
        } else {
            JOptionPane.showMessageDialog(this.mdi, "Departamento deve ser informado");
            this.cmbDepartamento.requestFocus();
            return;
        }
        obj = this.cmbGerente.getModel().getSelectedItem();
        if (obj instanceof Funcionario) {
            func.setGerente((Funcionario) obj);
        }

        FuncionarioDAO funcDao = new FuncionarioDAO(MDISistema.getConexao());
        int cod = this.intCampoTelas(this.txtCodigo.getText());
        // Escolhe entre atualizar ou criar!
        if (cod > 0) {
            func.setCod(cod);
            funcDao.update(func);
        } else {
            funcDao.create(func);
            this.txtCodigo.setText(Integer.toString(func.getCod()));
        }

        JOptionPane.showMessageDialog(this.mdi, "Registro Salvo");
        this.limpaTela();
        this.atualizaComboDepartamento();
        this.atualizaComboGerente();
        this.atualizaLista();
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this.mdi, "Número mal formatado [Código|Salário]");
        this.txtCodigo.requestFocus();
    } catch (ParseException ex) {
        JOptionPane.showMessageDialog(this.mdi, "Data inválida");
        this.txtDtContratacao.requestFocus();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this.mdi, String.format("Erro ao gravar Funcionario:%s", ex.getMessage()), "Erro", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(FormFuncionario.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_btSalvarActionPerformed

private void btAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarActionPerformed
    this.atualizaLista();
}//GEN-LAST:event_btAtualizarActionPerformed

private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
// TODO add your handling code here:
    this.limpaTela();
    this.txtCodigo.requestFocus();
}//GEN-LAST:event_btLimparActionPerformed

private void txtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoFocusLost
// TODO add your handling code here:
    int cod = this.intCampoTelas(this.txtCodigo.getText());
    if (cod > 0) {
        Funcionario func = new Funcionario(cod);
        boolean ret = this.preencheTela(func);
        if (!ret) {
            JOptionPane.showMessageDialog(this.mdi, "Código do Funcionário não existe no sistema", "Aviso", JOptionPane.WARNING_MESSAGE);
            this.txtCodigo.requestFocusInWindow();
        }
    }
}//GEN-LAST:event_txtCodigoFocusLost

private void tbFuncionariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbFuncionariosMouseClicked
// TODO add your handling code here:
    if (evt.getClickCount() > 1) {
        JTable obj = (JTable) evt.getComponent();
        int linha = obj.getSelectedRow();
        Integer cod = (Integer) obj.getModel().getValueAt(linha, 0);
        Funcionario func = new Funcionario(cod);
        this.preencheTela(func);
    }
}//GEN-LAST:event_tbFuncionariosMouseClicked

private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
 try {
        int cod = this.intCampoTelas(this.txtCodigo.getText());
        if (cod > 0) {
            Funcionario func = new Funcionario(cod);
            FuncionarioDAO funcDao = new FuncionarioDAO(MDISistema.getConexao());
            funcDao.delete(func);
            this.limpaTela();
            this.atualizaLista();
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this.mdi, String.format("Erro ao excluir Departamento:%s", ex.getMessage()), "Erro", JOptionPane.ERROR_MESSAGE);
        Logger.getLogger(FormDepartamento.class.getName()).log(Level.WARNING, "Erro ao excluir Departamento", ex);
    }
    this.atualizaLista();
}//GEN-LAST:event_btExcluirActionPerformed

    /**
     * Método auxiliar para atualizar a JTable com os dados do funcionario
     */
    private void atualizaLista() {
        try {
            FuncionarioDAO funcDAO = new FuncionarioDAO(MDISistema.getConexao());
            List<Funcionario> lista = funcDAO.listaTodos();
            DefaultTableModel dtm = (DefaultTableModel) this.tbFuncionarios.getModel();
            dtm.setRowCount(0);
            for (Funcionario func : lista) {
                dtm.addRow(new Object[]{func.getCod(), func.getNome(), func.getDtContratacao(), func.getCargo(), func.getGerente(), func.getDepartamento()});
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this.mdi, String.format("Erro ao ler os Departamentos:%s", ex.getMessage()), "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FormDepartamento.class.getName()).log(Level.WARNING, "Erro ao ler os Departamentos", ex);
        }
    }

    /**
     * Método auxiliar para limpar os campos da tela.
     */
    private void limpaTela() {
        this.txtCodigo.setText(null);
        this.txtCodigo.setEnabled(true);
        this.txtNome.setText(null);
        this.txtDtContratacao.setText(null);
        this.cmbDepartamento.getModel().setSelectedItem("");
        this.txtSalario.setText(null);
        this.cmbGerente.getModel().setSelectedItem("");
        this.txtCargo.setText(null);
    }

    /**
     * Método auxiliar para converter valores String sem causar exceções.
     * @param valor String contendo o valor a ser transformado para número
     * @return O valor convertido em inteiro ou zero em caso de algum problema
     */
    private int intCampoTelas(String valor) {
        int ret = 0;
        try {
            ret = Integer.parseInt(valor);
        } catch (NumberFormatException ex) {
        }
        return ret;
    }

    /**
     * Preenche os campos da tela com informações do funcionário.
     * @param func Funcionario que irá fornecer o código para pesquisa no SGBD e em seguida ir para a tela.
     */
    private boolean preencheTela(Funcionario func) {
        boolean ret = false;
        try {
            FuncionarioDAO funcDAO = new FuncionarioDAO(MDISistema.getConexao());
            func = funcDAO.retrieve(func);
            if (func != null && func.getCod() > 0) {
                this.txtCodigo.setText(Integer.toString(func.getCod()));
                this.txtCodigo.setEnabled(false);
                this.txtNome.setText(func.getNome());
                this.txtCargo.setText(func.getCargo());
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                this.txtDtContratacao.setText(sdf.format(func.getDtContratacao()));
                this.txtSalario.setText(func.getSalario().toString());
                this.cmbDepartamento.setSelectedItem(func.getDepartamento());
                this.cmbGerente.setSelectedItem(func.getGerente());
                ret = true;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this.mdi, String.format("Não foi possível carregar Funcionário: %s", ex.getMessage()), "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FormDepartamento.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ret;
    }

    private void atualizaComboDepartamento() {
        try {
            DepartamentoDAO deptDAO = new DepartamentoDAO(MDISistema.getConexao());
            List<Departamento> lista = deptDAO.listaTodos();
            Vector v = new Vector(lista);
            v.add(0, "");
            ComboBoxModel cbm = new DefaultComboBoxModel(v);
            this.cmbDepartamento.setModel(cbm);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this.mdi, String.format("Erro ao ler os Departamentos:%s", ex.getMessage()), "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FormDepartamento.class.getName()).log(Level.WARNING, "Erro ao ler os Departamentos", ex);
        }
    }

    private void atualizaComboGerente() {
        try {
            FuncionarioDAO funcDAO = new FuncionarioDAO(MDISistema.getConexao());
            List<Funcionario> lista = funcDAO.listaTodos();
            Vector v = new Vector(lista);
            v.add(0, "");
            ComboBoxModel cbm = new DefaultComboBoxModel(v);
            this.cmbGerente.setModel(cbm);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this.mdi, String.format("Erro ao carregar os gerentes:%s", ex.getMessage()), "Erro", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FormDepartamento.class.getName()).log(Level.WARNING, "Erro ao ler os gerentes", ex);
        }
    }

    @Override
    public void setVisible(boolean aFlag) {
        if (!isVisible()) {
            if (aFlag) {
                this.atualizaComboDepartamento();
                this.atualizaComboGerente();
            }
        }
        super.setVisible(aFlag);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtualizar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSalvar;
    private javax.swing.JComboBox cmbDepartamento;
    private javax.swing.JComboBox cmbGerente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbFuncionarios;
    private javax.swing.JTextField txtCargo;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtDtContratacao;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
}
